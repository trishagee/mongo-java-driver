/*
 * Copyright (c) 2008 - 2013 10gen, Inc. <http://10gen.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

configure(subprojects.findAll { it.name != 'util' }) {
    apply plugin: 'maven'
    apply plugin: 'signing'

    /* Artifacts */
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
        shadowJar
    }

    signing {
        required { gradle.taskGraph.hasTask('uploadArchives') }
        sign configurations.archives
    }

    project.ext.mavenDeployers = []

    def pom = { config ->
        project.mavenDeployers*.pom config
    }

    install {
        project.mavenDeployers << repositories.mavenInstaller
    }

    uploadArchives {
        project.mavenDeployers << repositories.mavenDeployer {
            def sonatypeCredentials = [
                    userName: project.properties.sonatypeUsername,
                    password: project.properties.sonatypePassword
            ]

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(sonatypeCredentials)
            }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(sonatypeCredentials)
            }
        }
    }

    pom {
        project {
            scm {
                url 'https://github.com/mongodb/mongo-java-driver'
                connection 'scm:git:git://github.com/mongodb/mongo-java-driver'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    name 'Various'
                    organization = '10gen'
                }
            }
        }

        whenConfigured { resultPom ->
            resultPom.dependencies.removeAll { dep -> dep.scope != 'compile' }
            resultPom.dependencies*.scope = null
        }
    }
}

project(':bson') {
    pom {
        project {
            name 'BSON'
            description 'The BSON libs'
            url 'http://bsonspec.org/'
        }
    }

    shadowJar {
        baseName = 'bson-all'
    }
}

project(':driver-core') {

    archivesBaseName = 'mongo-java-driver-core'

    pom {
        project {
            name 'MongoDB Java Driver'
            description 'The MongoDB Java Driver'
            url 'http://www.mongodb.org'
        }
    }
}

project(':driver') {

    archivesBaseName = 'mongo-java-driver'

    pom {
        project {
            name 'MongoDB Java Driver'
            description 'The MongoDB Java Driver'
            url 'http://www.mongodb.org'
        }
    }
    
    jar {
        manifest.attributes(
                'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0.txt',
                'Bundle-Name': 'MongoDB Java Driver',
                'Bundle-SymbolicName': 'org.mongodb.mongo-java-driver',
                'Import-Package': 'javax.management, javax.net, javax.net.ssl, javax.security.sasl, javax.security.auth.login, ' +
                                  'javax.security.auth, org.ietf.jgss',
                )
    }

    shadowJar {
        dependencies {
            exclude(dependency('io.netty:netty-all'))
        }
        baseName = 'driver-all'
    }

}